import java.beans.Visibility;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Main_백준_4485_녹색옷입은애가젤다지_G4_한원석_320ms {
	static int N, TC=1;
	static int[][] board;
	static String input;
	static boolean[][] visited;
	static int[] dx = {-1,1,0,0};
	static int[] dy = {0,0,-1,1};
	static StringBuilder sb = new StringBuilder();
	static PriorityQueue<int[]> pq = new PriorityQueue<int[]>((o1,o2)->Integer.compare(o1[0], o2[0]));
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		while(true) {
			N = Integer.parseInt(br.readLine());
			if (N==0) break;
			visited = new boolean[N][N];
			board = new int[N][N];
			for (int i = 0; i < N; i++) {
				input = br.readLine();
				for (int j = 0, index = 0; j < N; j++, index +=2) {
					board[i][j] = input.charAt(index)-'0';
				}
			}
			dijkstra();
		}
		System.out.println(sb.toString());
	}
	private static void dijkstra() {
		pq.add(new int[] {board[0][0],0,0});
		visited[0][0] = true;
		while(!pq.isEmpty()) {
			int[] tmp = pq.poll();
			if (tmp[1] == N-1 && tmp[2] == N-1) sb.append("Problem ").append(TC++).append(": ").append(tmp[0]).append("\n");
			for (int i = 0; i < 4; i++) {
				int ax = tmp[1] + dx[i];
				int ay = tmp[2] + dy[i];
				if(ax < 0 || ay < 0 || ax >= N || ay >= N || visited[ax][ay]) continue;
				pq.add(new int[] {tmp[0]+board[ax][ay],ax,ay});
				visited[ax][ay] = true;
			}
		}
	}
}
